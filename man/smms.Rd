% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/sm_msm_optim_func.R
\name{smms}
\alias{smms}
\title{Fit a semi-Markovian multistate model}
\usage{
smms(
  startval,
  data,
  graph,
  X = NULL,
  abs_exact = TRUE,
  mc_cores = 1,
  hessian_matrix = FALSE,
  cmethod = "hcubature"
)
}
\arguments{
\item{startval}{The parameter values where the optimisation routine will start. The dimension
and ordering is given by the user-specified densities.}

\item{data}{A data frame where the number of rows correspond to the total number of observations for all patients,
and  with 3 columns: patient (numbering or names for each patient), time (the time when a patient was observed),
state (the state which the patient occupies at the observation time). FOR NOW!!}

\item{graph}{A directed, acyclic graph giving the multistate structure, in the igraph format (igraph package).}

\item{X}{A matrix with the covariates. Number of rows equal to the number of patients and one column
for each covariate. The covariate specification is given by the user-specified densities.}

\item{abs_exact}{A boolean indicating whether the time of entrance into absorbing states is observed
exactly (TRUE) or not (FALSE). Default value is TRUE.}

\item{mc_cores}{The number of cores to use (for parallelisation). The function uses the mclapply()
function from the parallel package. Defaults to 1.}

\item{hessian_matrix}{Whether the hessian matrix (observed Fisher information matrix) for the parameter estimates
should be calculated or not.}

\item{cmethod}{The integration method of choice for the cubintegrate() function. Only for integrals
of higher dimension than 2. Defaults to "hcubature".}
}
\value{
The result from optimising the log-likelihood: parameter estimates with corresponding variance-covariance
matrix if variance_matrix = TRUE, and the maximum log-likelihood value.
}
\description{
The function the user should interact with. Assumes that the user has provided densities and
survival functions of the right format (ideally with all parameters living on -Inf to Inf -
to avoid having to set lower limits for some parameters).
}
\examples{
dd <- msm::cav
dd <- dd[!is.na(dd$pdiag), ]

# Remove observations where the patient appears to go back to a previous state
# (assumed to be impossible):
id_wrong <- unique(dd$PTNUM[which(dd$state != dd$statemax)])
dd <- dd[-which(dd$PTNUM \%in\% id_wrong), ]

dd <- dd[, -c(2, 5, 7, 9, 10)]
# rename relevant columns (necessary in current version):
colnames(dd)[1:2] <- c("patient", "time")
ddo <- dd

# Change state names from 1,2,3,4 to well, mild, severe, death
tab <- data.frame(state = 1:4, name = c("well", "mild", "severe", "death"))
dd$state <- tab$name[match(dd$state, tab$state)]

# Specify the graph:
gg <- igraph::graph_from_literal(
  "well" - -+"mild" - -+"severe" - -+"death", "well" - -+"death",
  "mild" - -+"death"
)

## -----------------------------------------------------------------------------
f_01 <- function(param, x, tt) dexp(tt, exp(param[1]))
f_12 <- function(param, x, tt) dexp(tt, exp(param[2]))
f_23 <- function(param, x, tt) dexp(tt, exp(param[3]))
f_03 <- function(param, x, tt) dexp(tt, exp(param[4]))
f_13 <- function(param, x, tt) dexp(tt, exp(param[5]))

S_01 <- function(param, x, tt) 1 - pexp(tt, exp(param[1]))
S_12 <- function(param, x, tt) 1 - pexp(tt, exp(param[2]))
S_23 <- function(param, x, tt) 1 - pexp(tt, exp(param[3]))
S_03 <- function(param, x, tt) 1 - pexp(tt, exp(param[4]))
S_13 <- function(param, x, tt) 1 - pexp(tt, exp(param[5]))

## -----------------------------------------------------------------------------
startval <- c(-2.5,-1.1,-1.2,-3.1,-2.8)
mlo <- smms(startval, dd, gg, mc_cores = 1L, hessian_matrix = TRUE)
}
